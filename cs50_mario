#include <stdio.h>
#include <cs50.h>

// the user will be prompted if the value entered does not fit within the range. Does this fall witin the do loop or the while loop itself?


int main(void)
{

// The do while loop will first prompt the user to enter th required number of collums for the pyramid. The wile parameter ensures that collumns between 1 and 8 may only be requested, otherwise we will revert back to the do query again and again.

int collumns;  // is it important to define the variable now rather than bolting it on within the do statement , i.e. ' int collumns = get_in(...' - for reasons unknown it doesnt work. Therefore define first
int line;
int j;
    do
    {
        collumns = get_int("Enter Number of Pyramid Collumns: ");
    }
    while ( collumns < 1 || collumns > 8);


    for (line = 1; collumns - line >= 0; line++) // the for loop is distinct from the do while loop above. line relates to the vertical place. line(2) refers to the second row. The if n is 5, the programme will cut of after line(4) producing five rows
    {
        //printf("%i", line);

        for (j = 1; collumns - j >= 0; j++) // once we are on a specific row i(1), we want to know what the jth value is, i.e. j(1) is the first value, beit a space or # in the row. We need to define with an if function whether
        {
            //printf("%i", j);                                         // a space or # applies as we move from left to right
                                                      // there is a relationship between collumns and hashtags present. line 1 has 7 spaces and 1 #, line 2 has ## and 6 spaces, and so on. on the first line, (with 2 collumns) '.','#'. The jth values are '.' and '#'. 2 - 1 >= line will have a hashtag
            if(collumns - line >= j)                    // the line number matches up with the total amount of # in that line.
                printf(" ");
            else
                printf("#");
        }

        printf("  ");                                    // this line creates the double space between the two triangles. We are still simply moving from left to right on the line 0/1/2 etc. We continue moving right, below, by finding the #'s in the second triangle on the same line.'

        for (int k = 0; k < line; k++)            // we need to print the right hand side of the triange. This is easier, as when we are on line(0), first line, we have one #, then line(1) = ##. Therefore use a for loop which
        {                                                  // keeps printing # without exceeding the line value.
            printf("#");
        }
        printf("\n");                                    // all of the above have come together to generate one single line moving left to right. line 0 .......#..# or line 1 ......##  ##. Now we need to start a new line. After this we swing right back to the start
    }                                                   // with the for collums loops, which will shift us onto the new row, in which we will again move left to right to, populating the spaces and hash tag values.


}
